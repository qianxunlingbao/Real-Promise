我们的项目：
微音 —— 一款在线听音乐的微信小程序。

Scrum软件过程：

1.用户注册
用户故事：我作为用户，我想要注册自己的帐号，这样我可以用自己的帐号来登录并使用小程序。
用户故事的拆分：
1.用户想要注册自己的帐号（SQL语句实现）。
2.用户想要使用自己的帐号登录小程序。
分解后的迭代任务：
1.小程序获取用户的微信ID（微信为用户关于当前小程序生成的唯一标识）。
2.根据用户数据库判断是否有匹配此微信ID的用户。
3.匹配则自动以该微信ID登录。
4.不匹配则自动创建以该微信ID为用户ID的新用户。
验收用例：用户自动注册自己的帐号，并且用自己的账号来登录并使用小程序。

2.搜索功能
用户故事：我作为用户（某些歌曲的爱好者），我想要搜索功能，这样可以找到到我喜欢的歌曲。
用户故事的拆分：
1.用户作为某一些特定歌曲的爱好者，想从小程序中通过搜索功能准确匹配数据库中的歌曲名称找到自己喜欢的歌曲。
2.当用户搜索喜欢歌曲名称的关键字时，也能从数据库的歌曲列表中联想到一些对应的歌曲名供用户选择。
分解后的迭代任务：
1.支持严格匹配的搜索功能（SQL语句实现）。
2.支持模糊查询的搜索功能（SQL语句实现）。
3.搜索的历史记录功能（SQL语句实现）。
验收用例：用户在搜索框内输入自己喜欢歌曲的名称（或者输入关键字选择自己喜欢歌曲的名称），点击搜索按钮，能准确查找到自己喜欢的歌曲，还可以看到自己的搜索历史记录并管理。

3.播放功能
用户故事：我作为用户，我想要播放功能并获取正在播放的歌曲的基本信息，这样我可以听歌。
用户故事的拆分：
1.用户想要播放歌曲。
2.用户想要获取正在播放的歌曲的基本信息（如歌曲的名称、作者、所属专辑）。
分解后的迭代任务：
1.获取歌曲的外部链接（SQL语句实现）。
2.使用小程序的音频播放接口读取歌曲的外部链接，实现播放功能。
3.通过外部接口或数据库获取歌曲的基本信息。
验收用例：用户播放歌曲，并获取正在播放歌曲的基本信息。

4.切换模式
用户故事：我作为用户，我想要切换播放模式，这样可以让我获得不同的听歌体验。
用户故事的拆分：
1.用户想要切换列表循环的播放模式。
2.用户想要切换单曲循环的播放模式。
3.用户想要切换随机播放的播放模式。
分解后的迭代任务：
1.几种基础模式的切换功能。
2.更为智能的高级模式——“心动模式”（心动模式：播放你最近收藏的歌曲，以及随机推荐的同类歌曲）。
验收用例：用户切换自己想要的播放模式，比如列表循环、单曲循环、随机播放、心动模式等。

5.歌曲评论
用户故事：我作为用户，我想要对听过的歌曲发表评论，也可以看见其他用户的评论，这样可以方便用户之间、用户与歌曲作者之间的交流互动。
用户故事的拆分：
1.用户想要对自己听过的歌曲发表评论（SQL语句实现）。
2.用户想要看到其他用户关于这首歌曲的评论。
分解后的迭代任务：
1.评论的点赞功能。
2.评论的留言功能。
3.点赞数多的评论将被选入“热评墙”。
验收用例：用户对自己听过的歌曲发表评论，还能看到其他用户的评论，并且对评论进行留言和点赞，还可以看到实时滚动的热评墙。

6.每日推荐
用户故事：我作为用户，我想要根据自己的听歌历史和收藏列表，获得每日推荐，这样可以每天都听到自己喜欢的新歌。
用户故事的拆分：
1.用户想要根据自己的听歌历史和收藏列表智能生成的每日推荐歌曲。
2.用户想要对每日推荐歌曲进行批量操作。
分解后的迭代任务：
1.每日推荐歌曲的批量收藏功能。
2.每日推荐歌曲的批量更换功能。
验收用例：用户根据自己的听歌历史和收藏列表生成每日推荐，并且对每日推荐的歌曲进行批量操作（收藏或更换）。

7.帐号管理
用户故事：我作为用户，我想要管理我的用户账号，这样可以更全面地使用这款小程序。
用户故事的拆分：
1.用户想要系统地管理自己的用户等级。
2.用户想要系统地管理自己的个人信息（SQL语句实现）。
分解后的迭代任务：
1.会员功能。
2.会员功能解锁后对应的特权功能。
验收用例：用户在“个人”界面，可以系统地管理自己的账号（用户等级和个人信息），包括开通会员后享受的高级特权功能。

8.创建歌单
用户故事：我作为用户，我想要自定义新的歌单（或删除歌单）并且向其中添加歌曲（或删除歌曲），这样可以更方便我整合不同的歌曲。
用户故事的拆分：
1.用户想要创建歌单（或删除歌单）（SQL语句实现）。
2.用户可以向已经创建的歌单中添加歌曲（或删除歌曲）。
分解后的迭代任务：
1.歌单的分享功能。
2.可以看到其他用户的歌单。
3.可以对其他用户的歌单进行点赞和评论。
验收用例：用户自定义创建自己的歌单（或删除歌单），并且向其中添加歌曲（或删除歌曲），之后分享自己的歌单，查看其他用户的歌单（并且对其他用户的歌单进行点赞和评论）。

9.收藏歌曲
用户故事：我作为用户，我想要收藏自己喜欢的歌曲，这样可以更方便地找到自己听过的喜欢的歌曲。
用户故事的拆分：
1.用户想要收藏自己喜欢的歌曲（SQL语句实现）。
2.当用户不再喜欢某首歌曲时，可以将其从收藏列表中删除。
分解后的迭代任务：
1.用户注册时自动创建一个歌单——“我喜欢的歌曲”。
2.收藏歌曲时向“我喜欢的歌曲”中添加歌曲。
3.删除收藏时从“我喜欢的歌曲”中将歌曲删除。
验收用例：用户收藏自己喜欢的歌曲，并且在不喜欢时将其从收藏列表中删除。

10.听歌识曲
用户故事：我作为用户，我想要在听到一首不知名歌曲时能够通过“听歌识曲”获得歌曲的名称，这样可以找到我不经意间听到的歌曲。
用户故事的拆分：
1.用户想要在听到不知名歌曲的时候进行录音并与数据库中的歌曲进行智能比对（SQL语句实现）。
2.智能比对后获得相似度最高的歌曲的名称。
分解后的迭代任务：
1.所录音的不知名歌曲的旋律与数据库中歌曲的旋律的智能比对功能。
2.智能比对后的相似度判断功能。
3.用户哼唱某段旋律时，能够通过“哼唱识曲”来找到类似旋律的歌曲名称。
验收用例：用户通过“听歌识曲”（或者“哼唱识曲”），获得自己听到的（或者哼唱的）类似旋律的歌曲名称。

11.滚动歌词
用户故事：我作为用户，我想要在听歌时获得实时滚动的歌词，这样可以提高我听歌的体验。
用户故事的拆分：
1.用户想要在听歌时获得对应的滚动歌词。
2.正在播放的那句歌词用不同颜色的字体来凸显。
分解后的迭代任务：
1.获取带时间戳的歌词。
2.读取时间戳，并且将匹配时间戳的那句歌词更改字体颜色。
3.获得歌曲对应的图片。
验收用例：用户在听歌时获得实时滚动的歌词和歌曲对应的图片。

12.查看排行榜
用户故事：我作为用户，我想要查看当前各种排行榜，这样可以方便我选择一些热度较高的歌曲试听。
用户故事的拆分：
1.用户想要查看新歌排行榜。
2.用户想要查看热歌排行榜。
3.用户想要查看原创排行榜。
4.用户想要查看歌手排行榜。
分解后的迭代任务：
1.可以看到网易云的排行榜，进行一些比较。
2.可以看到QQ音乐的排行榜，进行一些比较。
3.可以看到抖音的排行榜，进行一些比较。
验收用例：用户查看当前的各种音乐排行榜，并且可以看到其他音乐平台的排行榜，经过一些比较后，选择热度较高的歌曲试听。

13.本地音乐（缓存）
用户故事：我作为用户，我想要听到本地存储的歌曲或者小程序内缓存的歌曲，这样可以在没有网络连接的时候听歌。
用户故事的拆分：
1.用户想要听到本地存储的歌曲。
2.用户想要在小程序内缓存歌曲。
分解后的迭代任务：
1.调用小程序读取文件夹的接口读取本地存放音乐的文件夹。
2.调用小程序内部缓存接口，缓存最近听过的歌曲。
验收用例：用户可以听到本地存储的歌曲或者小程序内缓存的歌曲。

14.社交动态
用户故事：我作为用户，我想要发布一些动态，来分享自己关于小程序的使用和生活中的见闻，并且对自己发布的动态进行管理，这样可以使我与更多的用户交流。
用户故事的拆分：
1.用户在社交圈发布动态（SQL语句实现）。
2.用户可以管理自己发布的动态。
分解后的迭代任务：
1.用户可以看见其他用户的动态。
2.用户可以点赞其他用户的动态。
3.用户可以评论其他用户的动态。
4.用户可以转发其他用户的动态。
5.用户可以拍照或者上传本地图片，分享在动态中。
验收用例：用户拍照或上传本地图片来发布动态，并且可以管理自己的动态，还可以看见其他用户的动态，并可以点赞、评论、转发其他用户的动态。

15.下载歌曲
用户故事：我作为用户，我想要下载歌曲，这样可以将歌曲用在其他用途。
用户故事的拆分：
1.用户从数据库中下载歌曲文件（NodeJS实现）。
2.用户可以选择下载的存储路径。
分解后的迭代任务：
1.用户可以管理自己正在下载的歌曲。
2.用户可以管理自己的下载列表。
验收用例：用户选择自己需要的存储路径来下载歌曲，并且可以管理下载的歌曲。

16.设置
用户故事：我作为用户，我想要对小程序进行一些个性化的设置，这样可以更方便我使用小程序。
用户故事的拆分：
1.用户想要设置自己的消息和隐私。
2.用户想要更换自己的背景和主题。
3.用户想要进行一些其他的常规设置（账号，常规，播放，快捷键，下载设置，歌词，工具）。
分解后的迭代任务：
1.用户使用小程序自带的背景和主题。
2.用户上传本地图片，自定义背景和主题。
验收用例：用户对小程序进行一些个性化的常规设置，比如自定义背景和主题。

17.主播电台与私人FM
用户故事：我作为用户，我想要主播电台和私人FM功能，这样可以让我更好的使用小程序，提高我的使用体验。
用户故事的拆分：
1.主播电台：一些知名的歌曲作者创作的电台，每个电台中有很多节目。
2.私人FM：一个推荐歌曲的频道。
分解后的迭代任务：
1.用户可以收藏自己喜爱的电台节目。
2.私人FM推荐的歌曲是实时更新变化的。
验收用例：用户使用主播电台来收听电台节目，使用私人FM频道来听到推荐歌曲。

18.发布歌曲
用户故事：我作为歌曲作者，我想要在小程序内发布我创作的歌曲（审核后），这样可以让用户听到我的歌曲作品。
用户故事的拆分：
1.用户上传自己创作的歌曲，并由小程序审核。
2.审核通过后发布歌曲，添加在歌曲数据库中（SQL语句）。
分解后的迭代任务：
1.用户可以管理自己发布的歌曲。
2.用户可以管理自己发布的歌曲的相关评论。
3.用户可以凭借自己创作的歌曲参与相关的评奖。
验收用例：用户发布自己创作的歌曲（审核后）并进行管理。

19.社交好友（粉丝）
用户故事：我作为用户，我想要添加其他用户为好友，可以聊天或者发送私信，并且管理自己的好友，这样可以更方便我与其他用户交流。
用户故事的拆分：
1.用户想要添加其他用户为好友（SQL语句实现）。
2.用户想要与好友聊天或者发送私信。
3.用户想要管理自己的好友。
分解后的迭代任务：
1.用户可以关注自己喜欢的歌手或用户，关注后就会变成对方的粉丝。
2.用户可以向自己的粉丝发送私信。
3.用户可以看到自己关注对象的动态。
验收用例：用户添加其他用户为好友，聊天或者发送私信，并且可以管理自己的好友，还能关注自己喜欢的歌手或用户，看到他的动态，还可以向自己的粉丝发送私信。

20.MV与视频
用户故事：我作为用户，我想要观看一些歌曲相关的MV与视频，并进行评论和点赞，这样可以提高我的使用体验。
用户故事的拆分：
1.用户想要观看歌曲相关的MV与视频。
2.用户想要对MV与视频进行评论和点赞。
分解后的迭代任务：
1.用户可以下载视频。
2.用户可以上传视频（审核后）。
3.用户可以管理自己下载与上传的视频。
4.用户可以凭借自己创作的视频（审核后）进行相关的评奖。
验收用例：用户观看一些歌曲相关的MV与视频，并且可以对MV与视频进行评论和点赞，还可以自己下载和上传视频（审核后）并管理。

21.播放历史记录
用户故事：我作为用户，我想要我的播放历史记录，并且可以管理播放历史记录，这样可以查看我听过的歌曲。
用户故事的拆分：
1.用户想要看到最近播放过的歌曲历史记录。
2.用户想要管理自己的播放历史记录。
分解后的迭代任务：
1.统计播放历史记录中每首歌的播放次数。
2.按播放次数从高到低对历史记录进行排列，生成“最近常听”歌单。
验收用例：用户查看自己的播放历史记录并进行管理，并且可以看到每首歌的播放次数。

22.歌曲分类
用户故事：我作为用户，我想要不同的歌曲类别，这样我可以选择自己喜欢的类别来听。
用户故事的拆分：
1.对数据库中的歌曲进行分类。
2.为不同分类的歌曲创建新数据库（SQL语句实现）。
分解后的迭代任务：
1.智能统计不同类别歌曲的受欢迎程度。
2.智能统计每位用户最喜欢的歌曲类别。
验收用例：用户选择自己喜欢的类别的歌曲来听。

23.歌曲与视频的分享功能
用户故事：我作为用户，我想要分享歌曲与视频到其他社交平台（如QQ空间，微信朋友圈），这样可以让我与不同平台的朋友交流。
用户故事的拆分：
1.用户想要分享歌曲到其他社交平台。
2.用户想要分享视频到其他社交平台。
分解后的迭代任务：
1.分享前要进行授权，如未授权，则分享失败。
2.分享成功后可以选择留在当前平台或者返回小程序。
验收用例：用户在授权后可以分享歌曲与视频到其他社交平台，并且在分享后选择留在当前平台或者返回小程序。

24.桌面歌词
用户故事：我作为用户，我想要桌面歌词功能，这样可以让我在其他界面（小程序后台运行时）看到歌词。
用户故事的拆分：
1.设计实时变化的单行歌词。
2.用户可以在小程序之外的其他界面看到歌词。
分解后的迭代任务：
1.歌词跟随旋律逐字渲染（播放到哪个字，哪个字就改变颜色）。
2.歌词框大小的改变。
3.歌词框位置的变化。
验收用例：用户在小程序之外的其他界面看到可以实时变化的，逐字渲染的桌面歌词，并且可以改变歌词框的大小和位置。

25.内部音量调节
用户故事：我作为用户，我想要在不改变系统媒体音量的前提下，调节小程序内部的音量，这样可以调整适合我的音量。
用户故事的拆分：
1.用户想要调节小程序内部的音量。
2.不能改变系统的媒体音量。
分解后的迭代任务：
1.音效控制功能（如环绕声，立体声等多种音效）。
2.左右声道控制功能。
3.音量均衡器功能。
验收用例：用户在不改变系统媒体音量的前提下，调节小程序内部的音量，还可以进行一些高级控制（如音效，声道）。